{"version":3,"sources":["Nav.js","StarRating.js","MovieBox.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","id","placeholder","onChange","content","input","target","value","StarRating","state","arr","i","count","push","onClick","setRating","key","React","Component","MovieBox","className","this","items","map","el","src","img","width","name","rating","movies","App","Add","c","prompt","setState","concat","console","log","rateIt","x","rate","text","filter","toUpperCase","includes","trim","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAYeA,G,MAVH,SAACC,GACT,OACI,yBAAKC,GAAG,UACJ,2BAAOC,YAAY,4BAA4BD,GAAG,SAASE,SAAU,SAACC,GAAD,OAAaJ,EAAMK,MAAMD,EAAQE,OAAOC,UAC7G,6CCqBGC,E,YAzBX,WAAYR,GAAQ,IAAD,8BACf,4CAAMA,KACDS,MAAM,GAFI,E,sEAWf,IAHM,IAAD,OAEDC,EAAM,GAFL,WAGGC,GACDA,EAAI,EAAKX,MAAMY,MACdF,EAAIG,KAAK,0BAAMC,QAAS,kBAAM,EAAKd,MAAMe,UAAUJ,EAAI,IAAIK,IAAKL,GAAvD,WAETD,EAAIG,KAAK,0BAAMC,QAAS,kBAAM,EAAKd,MAAMe,UAAUJ,EAAI,IAAKK,IAAKL,GAAxD,YAJTA,EAAI,EAAGA,EAAE,EAAGA,IAAK,EAAjBA,GAOR,OACI,6BACKD,O,GArBQO,IAAMC,WC8BhBC,E,YA3BX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KACDS,MAAQ,GAFE,E,sEASf,OACI,yBAAKW,UAAU,YACVC,KAAKrB,MAAMsB,MAAMC,KAAI,SAACC,EAAIb,GAAL,OAClB,yBAAKK,IAAKL,EAAGS,UAAU,OACnB,yBAAKK,IAAKD,EAAGE,IAAKC,MAAM,UACxB,uBAAGP,UAAU,QAAb,IAAsBI,EAAGI,MACzB,yBAAKR,UAAU,UACf,kBAAC,EAAD,CAAaL,UAAW,aAAUH,MAAOY,EAAGK,mB,GAjB7CZ,IAAMC,WCIzBY,EAAS,CAAC,CACZF,KAAM,QACNF,IAAI,mDACJG,OAAQ,GAEV,CACED,KAAM,UACNF,IAAI,2EACJG,OAAQ,GAEV,CACCD,KAAK,UACLF,IAAI,2EACJG,OAAQ,IAmDME,E,YA7Cb,WAAY/B,GAAO,IAAD,8BAChB,4CAAMA,KAORgC,IAAM,WACJ,IAGIC,EAAI,CAACL,KAHOM,OAAO,2BAGGR,IAFVQ,OAAO,2BAEmBL,OAD1BK,OAAO,oBAGvB,EAAKC,SAAS,CACZL,OAAQ,EAAKrB,MAAMqB,OAAOM,OAAOH,KAEnCI,QAAQC,IAAIR,IAjBI,EAmBlBS,OAAS,SAAAC,GACP,EAAKL,SAAS,CACZM,KAAMD,KArBQ,EAwBlBnC,MAAQ,SAAAmC,GACN,EAAKL,SAAS,CACZO,KAAMF,KAxBR,EAAK/B,MAAQ,CACXqB,OAAQA,EACRW,KAAM,EACNC,KAAM,IALQ,E,sEAgCR,IAAD,OAAC,OACR,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,OACf,kBAAC,EAAD,CAAKf,MAAO,SAAAmC,GAAC,OAAI,EAAKnC,MAAMmC,MAC5B,kBAAC,EAAD,CAAY5B,MAAOS,KAAKZ,MAAMgC,KAAM1B,UAAW,SAAAyB,GAAC,OAAI,EAAKD,OAAOC,OAEhE,kBAAC,EAAD,CAAUlB,MAAOD,KAAKZ,MAAMqB,OAAOa,QAAO,SAAAnB,GAAE,OAAIA,EAAGK,QAAU,EAAKpB,MAAMgC,MAAQjB,EAAGI,KAAKgB,cAAcC,SAAS,EAAKpC,MAAMiC,KAAKE,cAAcE,aAC7I,4BAAQhC,QAAUO,KAAKW,KAAvB,U,GAxCYf,IAAMC,WCbJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eacf120d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Nav = (props) =>{\r\n    return(\r\n        <div id='NavBar'>\r\n            <input placeholder='Type movie name to search' id='Search' onChange={(content) => props.input(content.target.value)} />\r\n            <button>Search</button>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Nav","import React from 'react'\r\nclass StarRating extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            \r\n        }\r\n    }\r\n    // ☆\r\n    // ★\r\n    render() {\r\n        \r\n        let arr = []\r\n        for(let i = 0; i<5; i++){\r\n            if(i < this.props.count){\r\n                arr.push(<span onClick={() => this.props.setRating(i + 1)} key={i}>★</span>)\r\n            }else{\r\n                arr.push(<span onClick={() => this.props.setRating(i + 1)}  key={i}>☆</span>)\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                {arr}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default StarRating","import React from 'react'\r\nimport StarRating from './StarRating'\r\n\r\nclass MovieBox extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n           \r\n        }\r\n\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='MovieBox'>\r\n                {this.props.items.map((el, i) =>\r\n                    <div key={i} className='Box'>\r\n                        <img src={el.img} width='150px' />\r\n                        <p className='Name'> {el.name}</p>\r\n                        <div className='Rating' >\r\n                        <StarRating  setRating={() => {}} count={el.rating}/>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                )}\r\n            \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MovieBox","import React from 'react';\nimport './App.css';\nimport Nav from './Nav'\nimport MovieBox from './MovieBox'\nimport StarRating from './StarRating'\n\n\nlet movies = [{\n  name: 'Shrek',\n  img:'https://images.justwatch.com/poster/8732863/s592',\n  rating: 4\n},\n{\n  name: 'Shrek 2',\n  img:'https://images-na.ssl-images-amazon.com/images/I/71HQiOZsZ6L._SY445_.jpg',\n  rating: 5\n},\n{\n name:'Shrek 3',\n img:'https://prodimage.images-bn.com/pimages/0191329061084_p0_v1_s550x406.jpg',\n rating: 3\n}]\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      movies: movies,\n      rate: 1,\n      text: ''\n    }\n  }\n  Add = () => {\n    let movieName = prompt('Please enter movie name')\n    let movieLink = prompt('Please enter image link')\n    let movieRate = prompt('Rate this movie')\n    let c = {name: movieName, img: movieLink, rating: movieRate}\n  \n    this.setState({\n      movies: this.state.movies.concat(c)\n    })\n    console.log(movies)\n  }\n  rateIt = x => {\n    this.setState({\n      rate: x\n    })\n  }\n  input = x => {\n    this.setState({\n      text: x\n      \n    })\n  }\n  \n  \n  render() {return (\n    <div className=\"App\">\n      <div className='Bar'>\n      <Nav input={x => this.input(x)}/>\n      <StarRating count={this.state.rate} setRating={x => this.rateIt(x)}/>\n      </div>\n      <MovieBox items={this.state.movies.filter(el => el.rating >= this.state.rate && el.name.toUpperCase().includes(this.state.text.toUpperCase().trim()))}/>\n      <button onClick={ this.Add}>+</button>\n      \n    </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}